SET_UP && BASICS
git --version (to know the version of git in you machine)
git config (to know all configuration and credentials)
git config --global --list(to know username email and all)
git  config --global user.name "enter the username"(to set username in git)
git config --global user.email "email@mail.com" (to set email in git)
git status (to know the status of the git repository)
git log (to know previous commits)

WORKING WITH GIT (locally means : when repository is local on your machine )
git init (initialize repo with by default branch name as master)
git init -b main (initialize repo with custom branch name such as main)
git add filename whatever we write in our file will be present in working area but not in staging area(the area where our git has command over files) so to add files in staging area we will use This command
git add . (if there are multiple files and we want to add all of them in staging area)
git commit-m "pass any message" (the file in staging area (must be in staging area) is now ready to be released then it is committed using this command.)
git commit -a -m "pass the message"(the file in working area directly commited)
git commit -m "pass the message" --amend (by mistake if you wrote some wrong and incorrect data or passed the incorrect message then using this you can recommit the same file)
git rm --cached file name (to move back file from staging area to working area. it may be used sometimes to delete a file from git repository)
git diff (to know what changes we did on a file with respect to previous commit but this file is neither staged nor commited yet for the next time)
git diff --staged (to know what changes we did on file with respect to previous commited file which is staged but not commited yet for next time)
git reset . or filename (to again go back to working area from staging area)
git checkout . or filename (to undo all the changes from working area and move back to previous commited data)
git checkout copy 40 words long commit hash (so if you are at latest commit then branch name and head both will point to it but you can move head using this command and go and see and previous version by giving its commit hash that you will get using git log)
git checkout branch name (to move your head to the branch name)
git log -- all (to see all commits)
git log --graph / git log --all --graph (to see the log along with graphical lines representing branches)
git checkout commit hash file name or . (if you are at any version but you think to go to any previous version and modify it and make it a latest version then give commit hash of  the version where you want modification and give file name or .(for including all files)and modify it then do staging and commit . now head and branch name both will point new commit)
.gitignore(take a new file with this name and type any other filename that you have in your repo but you do not want to commit it )
git config --global alias.s "status" (it will do aliasing ex: anywhere if i want to type status then we can use s instead similarly we can config other aliases too )
